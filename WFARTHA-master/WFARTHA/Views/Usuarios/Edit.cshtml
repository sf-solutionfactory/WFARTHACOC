@model WFARTHA.Entities.USUARIO

@{
    //ViewBag.Title = "Edit";
    Layout = "~/Views/Shared/_Layout.cshtml";
    ViewBag.pagina_r = 601;
    ViewBag.carpeta_r = 500;
}
<script src="~/Scripts/Catalogos.js"></script>


<div class="row" style="margin-bottom:0">
    <div class="col s12 right-align">
        <a id="btn_guardarh" class="btn btn-small">Guardar</a>
    </div>

</div>

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()
    <div class="row">
        <div class="col s12 l12 right-align">
            @*<a class="btn" style="display:none" href="@Url.Action("Pass", new { id = Model.ID})">Cambiar contraseña</a>*@
            <input type="submit"  id="btn_guardar" value="Guardar" style="display:none" class="btn" />
        </div>
    </div>
    <div class="row">
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        @Html.HiddenFor(model => model.ID)
        @Html.HiddenFor(model => model.PASS)
        @Html.HiddenFor(model => model.FIRMA)
        <input id="vista" name="vista" type="hidden" value="E">

        @*<div class="input-field col s6">
                    @Html.PasswordFor(model => model.PASS, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.LabelFor(model => model.PASS, htmlAttributes: new { @class = "control-label col-md-2" })
                    @Html.ValidationMessageFor(model => model.PASS, "", new { @class = "text-danger" })
                <div class="input-field col s6">
                    <div style="height:54px;"></div>
                </div>
        </div>*@
        <div class="col l6 s12">
            <div class="card-panel">
                <div class="row">
                    <div class="input-field col s12">
                        @Html.EditorFor(model => model.NOMBRE, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.Label("Ingrese nombre ", htmlAttributes: new { @id = "lbl_nombre" })
                        @Html.ValidationMessageFor(model => model.NOMBRE, "", new { @class = "text-danger" })
                    </div>
                    <div class="input-field col s12">
                        @Html.EditorFor(model => model.APELLIDO_P, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.Label("Ingrese apellido paterno", htmlAttributes: new { @id = "lbl_appPat" })
                        @Html.ValidationMessageFor(model => model.APELLIDO_P, "", new { @class = "text-danger" })
                    </div>
                    <div class="input-field col s12">
                        @Html.EditorFor(model => model.APELLIDO_M, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.Label("Ingrese apellido materno", htmlAttributes: new { @id = "lbl_appMat" })
                        @Html.ValidationMessageFor(model => model.APELLIDO_M, "", new { @class = "text-danger" })
                    </div>
                    <div class="input-field col s12">
                        @Html.EditorFor(model => model.EMAIL, new { htmlAttributes = new { @type = "email" } })
                        @*@Html.EditorFor(model => model.EMAIL, new { htmlAttributes = new { @class = "form-control" } })*@
                        @Html.Label("Ingrese EMAIL", htmlAttributes: new { @id = "lbl_email" })
                        @Html.ValidationMessageFor(model => model.EMAIL, "", new { @class = "text-danger" })
                    </div>
                    @*<div class="input-field col s6">
            @Html.DropDownList("SPRAS_ID", null, htmlAttributes: new { @class = "select", required = true })
            <label id="lbl_spras">SPRAS</label>
            @Html.ValidationMessageFor(model => model.SPRAS_ID, "", new { @class = "text-danger" })
        </div>*@
                </div>
            </div>
        </div>
        <div class="col l6 s12">
            <div class="card-panel">
                <div class="row">
                    @*<div class="input-field col s12">
            @Html.DropDownList("PUESTO_ID", null, htmlAttributes: new { @class = "select", @id = "txt_puestoid" })
            @Html.LabelFor(model => model.PUESTO_ID, "PUESTO_ID", htmlAttributes: new { @id = "lbl_puesto" })
            @Html.ValidationMessageFor(model => model.PUESTO_ID, "", new { @class = "text-danger" })
        </div>*@

                    @*<div class="form-group">
            <div class=" dropdown col s12">
                @Html.Label("Tipo de usuario", htmlAttributes: new { @id = "lbl_sociedad" })
                @Html.DropDownListFor(model => model.PUESTO_ID, Model.usersLista, "Seleccione tipo de usuario", new { @class = "browser-default" })
                @Html.ValidationMessageFor(model => model.PUESTO_ID, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            <div class=" dropdown col s12">
                @Html.Label("Sociedad", htmlAttributes: new { @id = "lbl_sociedad" })
                @Html.DropDownListFor(model => model.BUNIT, Model.sociedadLista, "Seleccione Sociedad", new { @class = "browser-default" })
                @Html.ValidationMessageFor(model => model.BUNIT, "", new { @class = "text-danger" })
            </div>
        </div>*@
                    <div class="form-group">
                        <div class=" dropdown col s12">
                            @Html.Label("Tipo de usuario", htmlAttributes: new { @id = "lbl_sociedad" })
                            @Html.DropDownListFor(model => model.PUE, Model.UsersLista, "Seleccione tipo de usuario", new { @class = "browser-default" })
                            @Html.ValidationMessageFor(model => model.PUE, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    @*<div class="form-group">
                        <div class=" dropdown col s12">
                            @Html.Label("Sociedad", htmlAttributes: new { @id = "lbl_sociedad" })
                            @Html.DropDownListFor(model => model.BUKRS, Model.SociedadLista, "Seleccione Sociedad", new { @class = "browser-default" })
                            @Html.ValidationMessageFor(model => model.BUKRS, "", new { @class = "text-danger" })
                        </div>
                    </div>*@
                    @*<div class="input-field col s4">
            @Html.EditorFor(model => model.MANAGER, new { htmlAttributes = new { @class = "form-control" } })
            @Html.LabelFor(model => model.MANAGER, htmlAttributes: new { @class = "control-label col-md-2" })
            @Html.ValidationMessageFor(model => model.MANAGER, "", new { @class = "text-danger" })
        </div>

        <div class="input-field col s4">
            @Html.EditorFor(model => model.BACKUP_ID, new { htmlAttributes = new { @class = "form-control" } })
            @Html.LabelFor(model => model.BACKUP_ID, htmlAttributes: new { @class = "control-label col-md-2" })
            @Html.ValidationMessageFor(model => model.BACKUP_ID, "", new { @class = "text-danger" })
        </div>*@


                </div>
            </div>
        </div>
        @*<script>
            var elem = document.querySelectorAll('select');
            var options = [];
            var instance = M.FormSelect.init(elem, options);
        </script>*@
        @*<div class="col l6 s12">
            <div class="card-panel">
                <div class="row">
                    <h5>Grupos</h5>
                    <table class="table">
                        <thead>
                            <tr>
                                <th>Clave</th>
                                <th>Solciedad</th>
                                <th>País</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var item in Model.GAUTORIZACIONs)
                            {
                                <tr>
                                    <td>
                                        @Html.DisplayFor(modelItem => item.CLAVE)
                                    </td>
                                    <td>
                                        @Html.DisplayFor(modelItem => item.BUKRS)
                                    </td>
                                    <td>
                                        @Html.DisplayFor(modelItem => item.LAND)
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
        <div class="col l6 s12">
            <div class="card-panel">
                <div class="row">
                    <h5>Roles</h5>
                    <div class="col s12 right-align">
                        <div class="row">
                            <table class="table">
                                <thead><tr><th>Rol</th></tr></thead>
                                <tbody>
                                    @foreach (var item in Model.MIEMBROS)
                                    {
                                        <tr>
                                            <td>
                                                @Html.DisplayFor(modelItem => item.ROL.ROLTs.Where(a => a.SPRAS_ID.Equals(Session["spras"].ToString())).FirstOrDefault().TXT50)
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    </div>
                    <div class="col s12 right-align">
                        <a class="btn modal-trigger" href="#modal1">Agregar M</a>
                        <a class="btn modal-trigger" href="@Url.Action("AgregarRol", new { id = Model.ID })">Agregar</a>
                    </div>
                </div>
            </div>
        </div>*@
    </div>
    //OCG 11/10/18 Validacion de email
    @*<script>

        $('#EMAIL').on("focusout", function () {
            var email = $('#EMAIL').val();
            $('#EMAIL').removeClass("valid");
            $('#EMAIL').removeClass("invalid");
            if (validateEmail(email) == true) {
                $('#EMAIL').addClass("valid");
            }
            else {
                $('#EMAIL').addClass("invalid");
            }
        });

        function validateEmail(email) {
            var re = /^(([^<>()\[\]\\.,;:\s@@"]+(\.[^<>()\[\]\\.,;:\s@@"]+)*)|(".+"))@@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;
            return re.test(String(email).toLowerCase());
        }
    </script>*@
}



@if (ViewBag.Error != null)
{
    <script>
            M.toast({ html: '@ViewBag.Error' });
    </script>
}


@*@using (Html.BeginForm("AgregarRol", "Usuarios"))
    {
        @Html.AntiForgeryToken()

        <div id="modal1" class="modal modal-fixed-footer">
            <div class="modal-content">
                <h4>Agregar Rol</h4>
                <div class="row">
                    @Html.HiddenFor(model => model.ID)
                    @Html.HiddenFor(model => model.PUESTO_ID)
                    <div class="input-field col s6">
                        <select id="txt_rol" name="txt_rol" required="required" onchange="cambioRol(this);">
                            @foreach (var item in ViewBag.ROLES)
                            {
                                <option value="@item.ROL_ID">@item.TXT50</option>
                            }
                        </select>
                        <label for="txt_rol">Rol</label>
                    </div>
                </div>
                <div class="row" id="div_crea">
                    <div class="input-field col s6">
                        <select id="txt_soc" name="txt_soc" required="required" onchange="selSoci(this.id)">
                            <option value=""></option>
                            @foreach (var item in ViewBag.SOCIEDADES)
                            {
                                <option value="@item.BUKRS">@item.BUKRS</option>
                            }
                        </select>
                        <label for="txt_soc">Sociedad</label>
                    </div>
                    <div class="input-field col s6">
                        <select id="txt_pai" name="txt_pai" required="required" onchange="selSoci('txt_soc')">
                            <option value=""></option>
                            @foreach (var item in ViewBag.PAISES)
                            {
                                <option value="@item.LAND">@item.LANDX</option>
                            }
                        </select>
                        <label for="txt_pai">País</label>
                    </div>
                    <div id="lbl_puestos"></div>
                    @foreach (TAT001.Entities.DET_APROB item in ViewBag.APROBADORES)
                        {
                            <div class="input-field col s6">
                                <input id="@("PP"+item.PUESTOA_ID)" type="text" value="" />
                                <label for="@("PP"+item.PUESTOA_ID)"> @item.PUESTO1.PUESTOTs.Where(a => a.SPRAS_ID.Equals(Session["spras"].ToString())).First().TXT50</label>
                            </div>
                        }
                </div>
            </div>
            <div class="modal-footer">
                <input type="submit" class="modal-action modal-close btn-flat disabled" value="Agregar" id="btn_submit" />
            </div>
        </div>
    }
    <script>
        var elem = document.querySelector('.modal');
        var options = {
            onCloseEnd: function () {
                $("#lbl_puestos").empty();
                document.getElementById("txt_soc").value = "";
                document.getElementById("txt_pai").value = "";
                var elem2 = document.getElementById('txt_soc');
                var instance2 = M.FormSelect.init(elem2, []);
                var elem2 = document.getElementById('txt_pai');
                var instance2 = M.FormSelect.init(elem2, []);
            }
        };
        var instance = M.Modal.init(elem, options);
        var elem2 = document.getElementById('txt_rol');
        var instance2 = M.FormSelect.init(elem2, []);
        var elem2 = document.getElementById('txt_soc');
        var instance2 = M.FormSelect.init(elem2, []);
        var elem2 = document.getElementById('txt_pai');
        var instance2 = M.FormSelect.init(elem2, []);

        function cambioRol(campo) {
            if (campo.value == "1") {
                document.getElementById("div_crea").style.display = "initial";
                //$("#txt_soc option[value='']").attr('selected', true);
                document.getElementById("txt_soc").value = "";
                document.getElementById("txt_pai").value = "";
                var elem2 = document.getElementById('txt_soc');
                var instance2 = M.FormSelect.init(elem2, []);
                var elem2 = document.getElementById('txt_pai');
                var instance2 = M.FormSelect.init(elem2, []);
                $("#lbl_puestos").empty();
                document.getElementById("btn_submit").className = "modal-action modal-close btn-flat disabled";
            } else {
                document.getElementById("div_crea").style.display = "none";
                document.getElementById("btn_submit").className = "modal-action modal-close btn-flat";
            }
        }
        var campos_p = [];
        function selSoci(id) {
            var campo = document.getElementById(id);
            var pais = document.getElementById("txt_pai").value;
            $("#lbl_puestos").empty();
            if (pais != "") {
                var soc = campo.value;
                var pu = document.getElementById("txt_puestoid").value;
                $.ajax({
                    url: "../../Listas/Det_Aprob",
                    type: "GET",
                    async: false,
                    timeout: 30000,
                    dataType: "json",
                    data: { bukrs: campo.value, puesto: pu, spras: '@Session["spras"].ToString()' },
                    success: function (data) {
                        var pp = ($.map(data, function (item) {
                            return { label: item.TXT50, value: item.PUESTOA_ID };
                        }))
                        for (var i = 0; i < pp.length; i++) {
                            //var div = "<div class='input-field col s6'>" + formaInpPuestos(pp[i]) + "<label for='txt_p-" + pp[i].value + "'>" + pp[i].label + "</label></div>"
                            var div = "<div class='input-field col s6'>" +
                                "<input id='txt_p-" + pp[i].value + "' name='txt_p-" + pp[i].value + "' type='text' class='seleccUser' onchange='autorizadores();' />" +
                                "<label for='txt_p-" + pp[i].value + "'>" + pp[i].label + "</label></div>"
                            $("#lbl_puestos").append(div);
                            autocompleta("txt_p-" + pp[i].value, pp[i].value);
                        }
                        campos_p = pp;
                    }
                });

                if (pais != "" & soc != "") {
                    var p = pais;
                    var s = soc;
                    var u = '@Model.ID'
                    $.ajax({
                    url: "../../Listas/Grupos",
                    type: "GET",
                    async: false,
                    timeout: 30000,
                    dataType: "json",
                    data: { bukrs: s, pais: p, user: u },
                    success: function (data) {
                        var pp = ($.map(data, function (item) {
                            return { label: item.AGROUP_ID, value: item.AGROUP_ID };
                        }));
                        if (pp.length > 0) {
                            $("#lbl_puestos").empty();
                            M.toast({ html: 'No se puede elegir!' })
                        }
                    }
                });
                }
            }
        }

        function formaInpPuestos(p) {
             $.ajax({
                url: "../Listas/UsuariosPuesto",
                type: "GET",
                async: false,
                timeout: 30000,
                dataType: "json",
                data: { puesto: p.value },
                success: function (data) {
                    var uu = ($.map(data, function (item) {
                        return { label: item.ID, value: item.ID };
                    }))
                    var ret = "<select id='txt_p-" + p.value + "' name='txt_p-" + p.value + "'>";
                    for (var i = 0; i < uu.length; i++) {
                        ret += "<option value='" + uu[i].label + "'>" + uu[i].value+"</option>"}
                    ret += "</select>"
                    return ret
                }
            });
        }

        function autorizadores() {
            //for (var i = 0; i < campos_p.length; i++) {
            //    var value = document.getElementById("txt_p-" + campos_p[i].value).value;
            //    if (value != "") {
            //        document.getElementById("btn_submit").className = "modal-action modal-close btn-flat";
            //    } else {
            //        document.getElementById("btn_submit").className = "modal-action modal-close btn-flat disabled";
            //        break;
            //    }
            //}
        }
    </script>
    <link href="~/Content/autocomplete.css" rel="stylesheet" />
    <script src="~/Scripts/autocomplete1.10.2.js"></script>
    <script src="~/Scripts/autocomplete1.11.4.js"></script>
    <style>
        .ui-autocomplete {
            z-index: 1003;
        }
    </style>
    <script>
        var auto = $.noConflict(true);
        function autocompleta(id, p, freeInput) {
            auto("#" + id).autocomplete({
                source: function (request, response) {
                    auto.ajax({
                        url: "../../Listas/UsuariosPuesto",
                        type: "GET",
                        dataType: "json",
                        data: { puesto: p, Prefix: request.term },
                        success: function (data) {
                            response($.map(data, function (item) {
                                return { label: item.ID, value: item.ID };
                            }))
                        },
                        error: function (data) {
                            alert("error");
                        }
                    })
                },
                messages: {
                    noResults: '',
                    results: function (resultsCount) { }
                },
                change: function (e, ui) {
                    if (!(freeInput || ui.item)) {
                        e.target.value = "";
                    }

                    for (var i = 0; i < campos_p.length; i++) {
                        var value = document.getElementById("txt_p-" + campos_p[i].value).value;
                        if (value != "") {
                            document.getElementById("btn_submit").className = "modal-action modal-close btn-flat";
                        } else {
                            document.getElementById("btn_submit").className = "modal-action modal-close btn-flat disabled";
                            break;
                        }
                    }
                },
                autoFocus: true,
                minLength: 1
            });
        }
    </script>*@